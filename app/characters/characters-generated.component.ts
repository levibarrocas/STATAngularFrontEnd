/*
  This file is automatically generated. Any changes will be overwritten.
  Modify characters.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { LabelComponent } from '@radzen/angular/dist/label';
import { DropDownDataGridComponent } from '@radzen/angular/dist/dropdown-datagrid';
import { ButtonComponent } from '@radzen/angular/dist/button';
import { AccordionComponent } from '@radzen/angular/dist/accordion';
import { TextBoxComponent } from '@radzen/angular/dist/textbox';
import { TextAreaComponent } from '@radzen/angular/dist/textarea';
import { ImageComponent } from '@radzen/angular/dist/image';
import { GridComponent } from '@radzen/angular/dist/grid';

import { ConfigService } from '../config.service';
import { CharacterCompletionWarningComponent } from '../character-completion-warning/character-completion-warning.component';
import { NewCharacterComponent } from '../new-character/new-character.component';
import { ShowFeatLineComponent } from '../show-feat-line/show-feat-line.component';


export class CharactersGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('pageTitle') pageTitle: HeadingComponent;
  @ViewChild('label20') label20: LabelComponent;
  @ViewChild('dropdownDatagrid0') dropdownDatagrid0: DropDownDataGridComponent;
  @ViewChild('button0') button0: ButtonComponent;
  @ViewChild('heading1') heading1: HeadingComponent;
  @ViewChild('heading2') heading2: HeadingComponent;
  @ViewChild('heading3') heading3: HeadingComponent;
  @ViewChild('button7') button7: ButtonComponent;
  @ViewChild('accordion0') accordion0: AccordionComponent;
  @ViewChild('label8') label8: LabelComponent;
  @ViewChild('textbox0') textbox0: TextBoxComponent;
  @ViewChild('label11') label11: LabelComponent;
  @ViewChild('textbox9') textbox9: TextBoxComponent;
  @ViewChild('label12') label12: LabelComponent;
  @ViewChild('textarea0') textarea0: TextAreaComponent;
  @ViewChild('button2') button2: ButtonComponent;
  @ViewChild('textbox1') textbox1: TextBoxComponent;
  @ViewChild('button1') button1: ButtonComponent;
  @ViewChild('heading5') heading5: HeadingComponent;
  @ViewChild('button4') button4: ButtonComponent;
  @ViewChild('image0') image0: ImageComponent;
  @ViewChild('button3') button3: ButtonComponent;
  @ViewChild('button5') button5: ButtonComponent;
  @ViewChild('label13') label13: LabelComponent;
  @ViewChild('button6') button6: ButtonComponent;
  @ViewChild('textbox10') textbox10: TextBoxComponent;
  @ViewChild('button8') button8: ButtonComponent;
  @ViewChild('label14') label14: LabelComponent;
  @ViewChild('label15') label15: LabelComponent;
  @ViewChild('button19') button19: ButtonComponent;
  @ViewChild('textbox11') textbox11: TextBoxComponent;
  @ViewChild('button20') button20: ButtonComponent;
  @ViewChild('label16') label16: LabelComponent;
  @ViewChild('label17') label17: LabelComponent;
  @ViewChild('button21') button21: ButtonComponent;
  @ViewChild('textbox12') textbox12: TextBoxComponent;
  @ViewChild('button22') button22: ButtonComponent;
  @ViewChild('label18') label18: LabelComponent;
  @ViewChild('label19') label19: LabelComponent;
  @ViewChild('button23') button23: ButtonComponent;
  @ViewChild('textbox13') textbox13: TextBoxComponent;
  @ViewChild('button24') button24: ButtonComponent;
  @ViewChild('label26') label26: LabelComponent;
  @ViewChild('label27') label27: LabelComponent;
  @ViewChild('button25') button25: ButtonComponent;
  @ViewChild('textbox14') textbox14: TextBoxComponent;
  @ViewChild('button26') button26: ButtonComponent;
  @ViewChild('label28') label28: LabelComponent;
  @ViewChild('label29') label29: LabelComponent;
  @ViewChild('button27') button27: ButtonComponent;
  @ViewChild('textbox15') textbox15: TextBoxComponent;
  @ViewChild('button28') button28: ButtonComponent;
  @ViewChild('label30') label30: LabelComponent;
  @ViewChild('heading4') heading4: HeadingComponent;
  @ViewChild('grid2') grid2: GridComponent;
  @ViewChild('heading0') heading0: HeadingComponent;
  @ViewChild('grid3') grid3: GridComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;
  ID: any;
  Name: any;
  CharacterIndex: any;
  Character: any;
  getFeatsResult: any;
  getFeatsCount: any;
  Characters: any;
  CharacterCount: any;
  Loading: any;
  imageURL: any;
  imageIndex: any;
  parameters: any;
  Descriptions: any;
  CharacterCountText: any;
  CharactersCount: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.ID = "";

    this.Name = "";

    this.CharacterIndex = 0;

    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/GetUserCharacterWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('Nr', this.CharacterIndex)
    })
    .subscribe((result: any) => {
      this.Character = result.value;
    }, (result: any) => {

    });

    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/GetAvaliableFeatsWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('Nr', this.CharacterIndex)
    })
    .subscribe((result: any) => {
      this.getFeatsResult = result.value;

      this.getFeatsCount = result.count;
    }, (result: any) => {

    });

    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/GetUserCharactersWebApp`, {
      withCredentials: true
    })
    .subscribe((result: any) => {
      this.Characters = result.value;

      this.CharacterCount = result.count;
    }, (result: any) => {

    });

    this.Loading = false;

    this.imageURL = "";

    this.imageIndex = 0;
  }

  dropdownDatagrid0Change(event: any) {
    this.Loading = true;

    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/GetUserCharacterWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('Nr', this.CharacterIndex)
    })
    .subscribe((result: any) => {
      this.Character = result.value;

      this.Loading = false;

      this.Descriptions = result.descriptions;
    }, (result: any) => {

    });

    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/GetAvaliableFeatsWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('Nr', this.CharacterIndex)
    })
    .subscribe((result: any) => {
      this.getFeatsResult = result.value;

      this.getFeatsCount = result.count;
    }, (result: any) => {

    });
  }

  button0Click(event: any) {
    this.dialogService.open(NewCharacterComponent, { parameters: {}, title: 'New Character' })
        .afterClosed().subscribe(result => {
              this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/GetUserCharacterCountWebApp`, {
        withCredentials: true
      })
      .subscribe((result: any) => {
        this.CharacterCount = result.value;

        if (result.value > 1) {
                this.CharacterCountText = "You have " + result.value + " characters";
        }

        if (result.value == 1) {
                this.CharacterCountText = "You have 1 character";
        }

        if (result.value == 0) {
                this.CharacterCountText = "You have no characters";
        }
      }, (result: any) => {

      });

      this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/GetUserCharactersWebApp`, {
        withCredentials: true
      })
      .subscribe((result: any) => {
        this.Characters = result.value;

        this.CharactersCount = result.count;
      }, (result: any) => {

      });
    });
  }

  button7Click(event: any) {
    this.dialogService.open(CharacterCompletionWarningComponent, { parameters: {}, title: 'CharacterCompletionWarning' })
        .afterClosed().subscribe(result => {
              if (result) {
              this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/FinishCreationWebApp`, {
        withCredentials: true,
        params: new HttpParams().set('nID', this.CharacterIndex)
      })
        .subscribe((result: any) => {
      
        }, (result: any) => {
      
        });
      }
    });
  }

  button2Click(event: any) {
    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/Character/Update`, {
      withCredentials: true,
      params: new HttpParams().set('ID', this.Character.id)
                              .set('Name', `${this.Character.name}`)
                              .set('Gender', `${this.Character.gender}`)
                              .set('Description', `${this.Character.description}`)
    })
    .subscribe((result: any) => {



    }, (result: any) => {

    });
  }

  button1Click(event: any) {
    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/UserCharacter/AddReference`, {
      withCredentials: true,
      params: new HttpParams().set('UserID', `Cookie`)
                              .set('Nr', this.CharacterIndex)
                              .set('ImageURL', `${this.imageURL}`)
    })
    .subscribe((result: any) => {
      this.Character = result.value;
    }, (result: any) => {

    });
  }

  button4Click(event: any) {
    if (this.imageIndex > 0) {
        this.imageIndex = this.imageIndex - 1;
    }
  }

  button3Click(event: any) {
    if (this.imageIndex < this.Character.imageRefs.length) {
        this.imageIndex = this.imageIndex + 1;
    }
  }

  button5Click(event: any) {

  }

  button6Click(event: any) {
    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/EditCharacterStatWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('ID', this.CharacterIndex)
                              .set('More', '0')
                              .set('Stat', '1')
    })
    .subscribe((result: any) => {
      if (!result.error) {
            this.Character = result.value;
      }

      if (!result.error) {
            this.Descriptions = result.descriptions;
      }

      if (result.error) {
        this.notificationService.notify({ severity: "error", summary: `Error!`, detail: `${result.error}`, duration: 1000 });
      }
    }, (result: any) => {

    });
  }

  button8Click(event: any) {
    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/EditCharacterStatWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('ID', this.CharacterIndex)
                              .set('More', '1')
                              .set('Stat', '1')
    })
    .subscribe((result: any) => {
      if (!result.error) {
            this.Character = result.value;
      }

      if (!result.error) {
            this.Descriptions = result.descriptions;
      }

      if (result.error) {
        this.notificationService.notify({ severity: "error", summary: `Error!`, detail: `${result.error}`, duration: 1000 });
      }
    }, (result: any) => {

    });
  }

  button19Click(event: any) {
    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/EditCharacterStatWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('ID', this.CharacterIndex)
                              .set('More', '0')
                              .set('Stat', '2')
    })
    .subscribe((result: any) => {
      if (!result.error) {
            this.Character = result.value;
      }

      if (!result.error) {
            this.Descriptions = result.descriptions;
      }

      if (result.error) {
        this.notificationService.notify({ severity: "error", summary: `Error!`, detail: `${result.error}`, duration: 1000 });
      }
    }, (result: any) => {

    });
  }

  button20Click(event: any) {
    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/EditCharacterStatWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('ID', this.CharacterIndex)
                              .set('More', '1')
                              .set('Stat', '2')
    })
    .subscribe((result: any) => {
      if (!result.error) {
            this.Character = result.value;
      }

      if (!result.error) {
            this.Descriptions = result.descriptions;
      }

      if (result.error) {
        this.notificationService.notify({ severity: "error", summary: `Error!`, detail: `${result.error}`, duration: 1000 });
      }
    }, (result: any) => {

    });
  }

  button21Click(event: any) {
    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/EditCharacterStatWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('ID', this.CharacterIndex)
                              .set('More', '0')
                              .set('Stat', '3')
    })
    .subscribe((result: any) => {
      if (!result.error) {
            this.Character = result.value;
      }

      if (!result.error) {
            this.Descriptions = result.descriptions;
      }

      if (result.error) {
        this.notificationService.notify({ severity: "error", summary: `Error!`, detail: `${result.error}`, duration: 1000 });
      }
    }, (result: any) => {

    });
  }

  button22Click(event: any) {
    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/EditCharacterStatWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('ID', this.CharacterIndex)
                              .set('More', '1')
                              .set('Stat', '3')
    })
    .subscribe((result: any) => {
      if (!result.error) {
            this.Character = result.value;
      }

      if (!result.error) {
            this.Descriptions = result.descriptions;
      }

      if (result.error) {
        this.notificationService.notify({ severity: "error", summary: `Error!`, detail: `${result.error}`, duration: 1000 });
      }
    }, (result: any) => {

    });
  }

  button23Click(event: any) {
    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/EditCharacterStatWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('ID', this.CharacterIndex)
                              .set('More', '0')
                              .set('Stat', '4')
    })
    .subscribe((result: any) => {
      if (!result.error) {
            this.Character = result.value;
      }

      if (!result.error) {
            this.Descriptions = result.descriptions;
      }

      if (result.error) {
        this.notificationService.notify({ severity: "error", summary: `Error!`, detail: `${result.error}`, duration: 1000 });
      }
    }, (result: any) => {

    });
  }

  button24Click(event: any) {
    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/EditCharacterStatWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('ID', this.CharacterIndex)
                              .set('More', '1')
                              .set('Stat', '4')
    })
    .subscribe((result: any) => {
      if (!result.error) {
            this.Character = result.value;
      }

      if (!result.error) {
            this.Descriptions = result.descriptions;
      }

      if (result.error) {
        this.notificationService.notify({ severity: "error", summary: `Error!`, detail: `${result.error}`, duration: 1000 });
      }
    }, (result: any) => {

    });
  }

  button25Click(event: any) {
    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/EditCharacterStatWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('ID', this.CharacterIndex)
                              .set('More', '0')
                              .set('Stat', '5')
    })
    .subscribe((result: any) => {
      if (!result.error) {
            this.Character = result.value;
      }

      if (!result.error) {
            this.Descriptions = result.descriptions;
      }

      if (result.error) {
        this.notificationService.notify({ severity: "error", summary: `Error!`, detail: `${result.error}`, duration: 1000 });
      }
    }, (result: any) => {

    });
  }

  button26Click(event: any) {
    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/EditCharacterStatWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('ID', this.CharacterIndex)
                              .set('More', '1')
                              .set('Stat', '5')
    })
    .subscribe((result: any) => {
      if (!result.error) {
            this.Character = result.value;
      }

      if (!result.error) {
            this.Descriptions = result.descriptions;
      }

      if (result.error) {
        this.notificationService.notify({ severity: "error", summary: `Error!`, detail: `${result.error}`, duration: 1000 });
      }
    }, (result: any) => {

    });
  }

  button27Click(event: any) {
    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/EditCharacterStatWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('ID', this.CharacterIndex)
                              .set('More', '0')
                              .set('Stat', '6')
    })
    .subscribe((result: any) => {
      if (!result.error) {
            this.Character = result.value;
      }

      if (!result.error) {
            this.Descriptions = result.descriptions;
      }

      if (result.error) {
        this.notificationService.notify({ severity: "error", summary: `Error!`, detail: `${result.error}`, duration: 1000 });
      }
    }, (result: any) => {

    });
  }

  button28Click(event: any) {
    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/EditCharacterStatWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('ID', this.CharacterIndex)
                              .set('More', '1')
                              .set('Stat', '6')
    })
    .subscribe((result: any) => {
      if (!result.error) {
            this.Character = result.value;
      }

      if (!result.error) {
            this.Descriptions = result.descriptions;
      }

      if (result.error) {
        this.notificationService.notify({ severity: "error", summary: `Error!`, detail: `${result.error}`, duration: 1000 });
      }
    }, (result: any) => {

    });
  }

  grid3RowSelect(event: any) {
    this.dialogService.open(ShowFeatLineComponent, { parameters: {FeatID: event.feat.ID}, title: 'Show FeatLine' });
  }

  button9Click(event: any, data: any) {
    this.httpClient.request('get', `${this.configService.get('serverMethodsUrl')}api/ServerMethods/BuyFeatWebApp`, {
      withCredentials: true,
      params: new HttpParams().set('Nr', this.CharacterIndex)
                              .set('FeatID', data.ID)
    })
    .subscribe((result: any) => {
      if (!result.error) {
            this.Character = result.value;
      }

      if (!result.error) {
        this.notificationService.notify({ severity: "success", summary: `Success!`, detail: `You bought ${data.Name}`, duration: 1000 });
      }

      if (result.error) {
        this.notificationService.notify({ severity: "error", summary: `Error!`, detail: `${result.error}`, duration: 1000 });
      }
    }, (result: any) => {

    });
  }
}
